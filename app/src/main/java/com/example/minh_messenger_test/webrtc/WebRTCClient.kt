package com.example.minh_messenger_test.webrtc

import android.content.Context
import android.util.Log
import com.example.minh_messenger_test.utils.DataModel
import com.example.minh_messenger_test.utils.DataModelType
import com.google.gson.Gson
import org.webrtc.*
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class WebRTCClient @Inject constructor(
    private val context: Context,
    private val gson: Gson
) {

    // Class variables
    var listener: Listener? = null
    private lateinit var username: String

    // WebRTC variables
    private val eglBaseContext = EglBase.create().eglBaseContext  // T·∫°o EGL context ƒë·ªÉ render video WebRTC
    private val peerConnectionFactory by lazy { createPeerConnectionFactory() }  // Factory t·∫°o c√°c PeerConnection
    private var peerConnection: PeerConnection? = null  // ƒê·ªëi t∆∞·ª£ng PeerConnection ƒë·ªÉ qu·∫£n l√Ω k·∫øt n·ªëi

    private val iceServer = listOf(
        PeerConnection.IceServer.builder("stun:ss-turn2.xirsys.com").createIceServer(),
        PeerConnection.IceServer.builder("turn:ss-turn2.xirsys.com:80?transport=udp")
            .setUsername("YfuG9ImT3ARNhhbVfIzOGOz_qIFtomA-x-8dLJ6ZSs8zElI8dhvLkvHRfaG1jGAIAAAAAGeiEqBtaW5oMzU1MjU=")
            .setPassword("ea7b3e6a-e2f9-11ef-aa87-0242ac140004")
            .createIceServer(),
        PeerConnection.IceServer.builder("turn:ss-turn2.xirsys.com:3478?transport=udp")
            .setUsername("YfuG9ImT3ARNhhbVfIzOGOz_qIFtomA-x-8dLJ6ZSs8zElI8dhvLkvHRfaG1jGAIAAAAAGeiEqBtaW5oMzU1MjU=")
            .setPassword("ea7b3e6a-e2f9-11ef-aa87-0242ac140004")
            .createIceServer(),
        PeerConnection.IceServer.builder("turns:ss-turn2.xirsys.com:443?transport=tcp")
            .setUsername("YfuG9ImT3ARNhhbVfIzOGOz_qIFtomA-x-8dLJ6ZSs8zElI8dhvLkvHRfaG1jGAIAAAAAGeiEqBtaW5oMzU1MjU=")
            .setPassword("ea7b3e6a-e2f9-11ef-aa87-0242ac140004")
            .createIceServer(),
        PeerConnection.IceServer.builder("turns:ss-turn2.xirsys.com:5349?transport=tcp")
            .setUsername("YfuG9ImT3ARNhhbVfIzOGOz_qIFtomA-x-8dLJ6ZSs8zElI8dhvLkvHRfaG1jGAIAAAAAGeiEqBtaW5oMzU1MjU=")
            .setPassword("ea7b3e6a-e2f9-11ef-aa87-0242ac140004")
            .createIceServer()
    )

    // H·ªó tr·ª£ x·ª≠ l√Ω texture t·ª´ video.
    private var surfaceTextureHelper: SurfaceTextureHelper? = null

    private val localAudioSource by lazy { peerConnectionFactory.createAudioSource(MediaConstraints()) } // T·∫°o ngu·ªìn √¢m thanh
    private val localVideoSource by lazy { peerConnectionFactory.createVideoSource(false) } // T·∫°o ngu·ªìn video (false = kh√¥ng b·∫≠t m·∫∑c ƒë·ªãnh)

    private val videoCapturer = getVideoCapturer(context)
    private val mediaContraint = MediaConstraints().apply {
        mandatory.add(MediaConstraints.KeyValuePair("OfferToReceiveVideo", "true"))  // Y√™u c·∫ßu nh·∫≠n video.
        mandatory.add(MediaConstraints.KeyValuePair("OfferToReceiveAudio", "true"))
    }

    // Call variables
    private lateinit var localSurfaceView: SurfaceViewRenderer  // View hi·ªÉn th·ªã video c·ª•c b·ªô (local)
    private lateinit var remoteSurfaceView: SurfaceViewRenderer // View hi·ªÉn th·ªã video t·ª´ xa (remote)
    private var localStream: MediaStream? = null                // Stream ch·ª©a c√°c track media (audio/video)
    private var localTrackId = ""                               // ID cho track c·ª•c b·ªô
    private var localStreamId = ""                              // ID cho stream c·ª•c b·ªô
    private var localAudioTrack: AudioTrack? = null             // Track √¢m thanh c·ª•c b·ªô
    private var localVideoTrack: VideoTrack? = null             // Track video c·ª•c b·ªô

    // Initializing WebRTC dependencies
    init {
        initPeerConnectionFactory()  // Kh·ªüi t·∫°o PeerConnectionFactory khi class ƒë∆∞·ª£c t·∫°o
    }
    /**
     * Kh·ªüi t·∫°o PeerConnectionFactory v·ªõi c√°c c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
     */
    private fun initPeerConnectionFactory() {
        val options = PeerConnectionFactory.InitializationOptions.builder(context)
            .setEnableInternalTracer(true) // B·∫≠t tr√¨nh theo d√µi n·ªôi b·ªô ƒë·ªÉ debug
            .setFieldTrials("WebRTC-H264HighProfile/Enabled/") // K√≠ch ho·∫°t h·ªó tr·ª£ m√£ h√≥a H.264 High Profile
            .createInitializationOptions()
        PeerConnectionFactory.initialize(options)
    }
    /**
     * T·∫°o PeerConnectionFactory ƒë·ªÉ qu·∫£n l√Ω c√°c k·∫øt n·ªëi WebRTC
     */
    private fun createPeerConnectionFactory(): PeerConnectionFactory {
        return PeerConnectionFactory.builder()
            .setVideoDecoderFactory(DefaultVideoDecoderFactory(eglBaseContext))  // X·ª≠ l√Ω gi·∫£i m√£ video
            .setVideoEncoderFactory(DefaultVideoEncoderFactory(eglBaseContext, true, true))  // X·ª≠ l√Ω m√£ h√≥a video
            .setOptions(PeerConnectionFactory.Options().apply {
                disableNetworkMonitor = false // B·∫≠t/t·∫Øt theo d√µi m·∫°ng
                disableEncryption = false     // B·∫≠t m√£ h√≥a d·ªØ li·ªáu
            })
            .createPeerConnectionFactory()
    }

    /**
     * Kh·ªüi t·∫°o WebRTC Client v·ªõi t√™n ng∆∞·ªùi d√πng v√† Observer ƒë·ªÉ l·∫Øng nghe s·ª± ki·ªán t·ª´ PeerConnection
     */
    fun initializeWebrtcClient(username: String, observer: PeerConnection.Observer) {
        this.username = username
        localTrackId = "${username}_track"
        localStreamId = "${username}_stream"
        peerConnection = createPeerConnection(observer)

        // Ki·ªÉm tra danh s√°ch r√†ng bu·ªôc (constraints)
        Log.d("WebRTC1", "üîß Media Constraints: ${mediaContraint.mandatory}")
    }



    /**
     * T·∫°o k·∫øt n·ªëi PeerConnection v·ªõi c·∫•u h√¨nh ICE Server v√† Observer
     */
    private fun createPeerConnection(observer: PeerConnection.Observer): PeerConnection? {
        Log.d("WebRTC1", "üõ†Ô∏è ƒêang t·∫°o PeerConnection v·ªõi observer: $observer")
        return peerConnectionFactory.createPeerConnection(iceServer, observer)
    }


    fun call(target: String){
        Log.d("WebRTC1", "üìû B·∫Øt ƒë·∫ßu g·ª≠i Offer ƒë·∫øn $target")

        peerConnection?.createOffer(object : MySdpObserver() {
            override fun onCreateSuccess(desc: SessionDescription?) {
                super.onCreateSuccess(desc)
                Log.d("WebRTC1", "‚úÖ Offer ƒë∆∞·ª£c t·∫°o: ${desc?.description}")
                peerConnection?.setLocalDescription(object : MySdpObserver() {
                    override fun onSetSuccess() {
                        super.onSetSuccess()
                        Log.d("WebRTC1", "üì° ƒê√£ ƒë·∫∑t Local Description")
                        listener?.onTransferEventToSocket(
                            DataModel(type = DataModelType.Offer,
                                sender = username,
                                target = target,
                                data = desc?.description)
                        )
                    }
                }, desc)
            }

        }, mediaContraint)
    }

    fun answer(target: String){
        peerConnection?.createAnswer(object : MySdpObserver() {
            override fun onCreateSuccess(desc: SessionDescription?) {
                super.onCreateSuccess(desc)
                peerConnection?.setLocalDescription(object : MySdpObserver() {
                    override fun onSetSuccess() {
                        super.onSetSuccess()
                        listener?.onTransferEventToSocket(
                            DataModel(type = DataModelType.Answer,
                                sender = username,
                                target = target,
                                data = desc?.description)
                        )
                    }
                }, desc)
            }

        }, mediaContraint)
    }

    fun onRemoteSessionReceived(sessionDescription: SessionDescription){
        peerConnection?.setRemoteDescription(MySdpObserver(), sessionDescription)
    }

    fun addIceCandidateToPeer(iceCandidate: IceCandidate){
        peerConnection?.addIceCandidate(iceCandidate)
    }

    fun sendIceCandidate(target: String, iceCandidate: IceCandidate){
        addIceCandidateToPeer(iceCandidate)
        listener?.onTransferEventToSocket(
            DataModel(type = DataModelType.IceCandidates,
                sender = username,
                target = target,
                data = gson.toJson(iceCandidate))
        )
    }

    fun closeConnection(){
        try {
            videoCapturer.dispose()
            localStream?.dispose()
            peerConnection?.dispose()
        }catch (e: Exception){
            e.printStackTrace()
        }
    }

    fun switchCamera(){
        videoCapturer.switchCamera(null)
    }

    fun toggleAudio(shouldBeMuted: Boolean){
        if(shouldBeMuted){
            localStream?.removeTrack(localAudioTrack)
        }else{
            localStream?.addTrack(localAudioTrack)
        }
    }

    fun toggleVideo(shouldBeMuted: Boolean){
        try{
            if(shouldBeMuted){
                stopCapturingCamera()
            }else{
                startCapturingCamera(localSurfaceView)
            }
        }catch (e:Exception){
            e.printStackTrace()
        }
    }




    // ----- Streaming Section -----
    /**
     * Kh·ªüi t·∫°o SurfaceView ƒë·ªÉ hi·ªÉn th·ªã video (c·ª•c b·ªô ho·∫∑c t·ª´ xa)
     */
    private fun initSurfaceView(view: SurfaceViewRenderer) {
        view.run {
            setMirror(false)                 // Kh√¥ng l·∫≠t g∆∞∆°ng video
            setEnableHardwareScaler(true)    // B·∫≠t tƒÉng t·ªëc ph·∫ßn c·ª©ng ƒë·ªÉ c·∫£i thi·ªán hi·ªáu su·∫•t
            init(eglBaseContext, null)       // Kh·ªüi t·∫°o SurfaceView v·ªõi EGL context
        }
    }
    fun initRemoteSurfaceView(view: SurfaceViewRenderer){
        this.remoteSurfaceView = view
        initSurfaceView(view)
    }
    /**
     * Kh·ªüi t·∫°o SurfaceView c·ª•c b·ªô v√† b·∫Øt ƒë·∫ßu streaming (video ho·∫∑c ch·ªâ audio)
     */
    fun initLocalSurfaceView(localView: SurfaceViewRenderer, isVideoCall: Boolean) {
        this.localSurfaceView = localView
        initSurfaceView(localView)
        startLocalStreaming(localView, isVideoCall)
    }
    /**
     * B·∫Øt ƒë·∫ßu truy·ªÅn ph√°t media c·ª•c b·ªô (audio v√† video n·∫øu l√† cu·ªôc g·ªçi video)
     */
    private fun startLocalStreaming(localView: SurfaceViewRenderer, isVideoCall: Boolean) {
        localStream = peerConnectionFactory.createLocalMediaStream(localStreamId)

        if (isVideoCall) {
            startCapturingCamera(localView)
        }

        localAudioTrack = peerConnectionFactory.createAudioTrack(localTrackId + "_audio", localAudioSource)
        localStream?.addTrack(localAudioTrack)

        Log.d("WebRTC1", "ƒêang th√™m Local Stream v√†o PeerConnection...")
        peerConnection?.addStream(localStream)

    }

    /**
     * B·∫Øt ƒë·∫ßu quay video t·ª´ camera
     */
    private fun startCapturingCamera(localView: SurfaceViewRenderer) {
        Log.d("WebRTC1", "üé• B·∫Øt ƒë·∫ßu quay video t·ª´ Camera...")

        surfaceTextureHelper = SurfaceTextureHelper.create(
            Thread.currentThread().name, eglBaseContext
        )

        videoCapturer.initialize(
            surfaceTextureHelper, context, localVideoSource.capturerObserver
        )

        videoCapturer.startCapture(
            720, 480, 20
        )

        localVideoTrack = peerConnectionFactory.createVideoTrack(localTrackId+"_video", localVideoSource)
        localVideoTrack?.addSink(localView)
        localStream?.addTrack(localVideoTrack)
    }

    private fun getVideoCapturer(context: Context): CameraVideoCapturer =
        Camera2Enumerator(context).run{
            deviceNames.find{
                isFrontFacing(it)
            }?.let{
                createCapturer(it, null)
            }?:throw IllegalStateException()
        }
    /**
     * D·ª´ng quay video t·ª´ camera
     */
    private fun stopCapturingCamera() {
        videoCapturer.dispose()
        localVideoTrack?.removeSink(localSurfaceView)
        localSurfaceView.clearImage()
        localStream?.removeTrack(localAudioTrack)
        localVideoTrack?.dispose()
    }



    /**
     * Interface ƒë·ªÉ g·ª≠i d·ªØ li·ªáu qua socket ho·∫∑c x·ª≠ l√Ω s·ª± ki·ªán WebRTC
     */
    interface Listener {
        fun onTransferEventToSocket(data: DataModel)
    }
}
